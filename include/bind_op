// <bind_op> -*- C++ -*-
// Copyright 2016 Jeremy Letang.
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

#include <type_traits>
#include <functional>
#include <algorithm>
#include <string>
#include <array>

// Optional support is defined for C++14 in the experimental/optional header
#if __cplusplus >= 201402L
# include <experimental/optional>
// with C++17 we just need to include optional
#elif __cplusplus >= 201701L
# include <optional>
#endif

namespace bind_op {

// here we redefine the namespace from where is optional
// if we use C++ younger than 2014 02, we may have the optional implemantation
// inside std::experimental
#if __cplusplus >= 201402L
namespace  _std_opt = std::experimental;
// if we use c++ after C++17, we must have optional support in std
#elif __cplusplus >= 201701L
namespace _std_opt = std;
#endif

namespace detail {

template<typename T>
struct has_const_iterator {
private:
    template<typename C> static char test(typename C::const_iterator*);
    template<typename C> static int  test(...);
public:
    enum { value = sizeof(test<T>(0)) == sizeof(char) };
};

} // detail

// enable option support for the operator only if the version of C++
// is superior at least at 201402, which sould include optional in
// // std::experimental
#if __cplusplus >= 201402L

template <
  typename T,
  typename F,
  typename = std::enable_if_t<
    std::is_convertible<
      F,
      std::function<decltype(std::declval<F>()((std::declval<T>())))(const T&)
    >
  >::value>
>
auto operator>>=(const _std_opt::optional<T>& lhs, F f) -> decltype(auto) {
  if (lhs == _std_opt::nullopt) {
    decltype(_std_opt::make_optional(f(*lhs))) nul = _std_opt::nullopt;
    return nul;
  }
  return _std_opt::make_optional(f(*lhs));
}

#endif // end of std::optional support

// support for stl style container
// these container should provide const_iterator
// and value_type member
// we use the constructor to initialize the container with the same size than
// the input container
template <
  template <typename...Args> class C,
  typename F,
  typename... A,
  typename = std::enable_if_t<detail::has_const_iterator<C<A...>>::value>
>
auto operator>>=(const C<A...>& lhs, F f) -> decltype(auto) {
  // create the output container with the size of the input one
  C<decltype(f(std::declval<typename C<A...>::value_type>()))> out(lhs.size());
  std::transform(std::cbegin(lhs), std::cend(lhs), std::begin(out), f);
  return out;
}

// support for any kind of basic_string
// need to be separate from the normal stl container because of the
// reserved size constructor which take a size + a character to initialize the string
template <
  typename CharT,
  typename Traits,
  typename Allocator,
  typename F
>
auto operator>>=(const std::basic_string<CharT, Traits, Allocator>& lhs, F f)
  -> decltype(auto) {
  // create the output string with the size of the input one
  std::basic_string<CharT, Traits, Allocator> out(lhs.size(), CharT{});
  std::transform(std::cbegin(lhs), std::cend(lhs), std::begin(out), f);
  return out;
}

// support for std::array
// need to be specific too as we have to know at compile time the size of
// the array from the type parameter of the input array
template <
  typename T,
  typename F,
  size_t N
>
auto operator>>=(const std::array<T, N>& lhs, F f)
  -> decltype(auto) {
  // create the output string with the size of the input one
  std::array<decltype(f(std::declval<T>())), N> out;
  std::transform(std::cbegin(lhs), std::cend(lhs), std::begin(out), f);
  return out;
}

} // bind_op
